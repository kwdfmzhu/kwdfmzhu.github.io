<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kwdfmzhu&#39;s blog</title>
  <subtitle>The World is Full of Shit</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-16T11:02:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>kwdfmzhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次django部署时遇到的问题总结</title>
    <link href="http://yoursite.com/2017/10/16/%E8%AE%B0%E4%B8%80%E6%AC%A1django%E9%83%A8%E7%BD%B2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/16/记一次django部署时遇到的问题总结/</id>
    <published>2017-10-16T08:52:18.000Z</published>
    <updated>2017-10-16T11:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>一. 大概情况<br>就是说有一个django服务需要部署到centos的apache上去。但是呢该centos内核版本较低，自带的python版本较低。需要自己编译一个python2.7的版本替换掉系统的。然后就开展了一场与各种配置的艰苦斗争。。。</p>
<p>篇幅短长，大家就当作看一个故事吧。重点的呢会加黑一下，同时也写在结论处的。</p>
<p>二. 斗争过程<br>2.1. 刚拿到这个任务时，我登陆centos找apache服务。但是居然没有找到/etc/apache2(以前接触的机器都是ubuntu和debian, 没有接触过redhat和centos)，我困惑了。。。然后查了一下才知道centos上的httpd就是apache，也就是<strong>/etc/httpd就是我要找的apache目录</strong>。</p>
<p>2.2. 知道apache目录后，我首先试着跑了一下django，采用本地启动的方式，验证采用wget ${URL}的方式，发现程序是OK的。那么就可以部署到apache上去了。apache中的conf/httpd.conf中已经有了对应的wsgi配置(已有前人的肩膀可以踩了，很happy)，看了一下<strong>WSGIScriptAlias</strong> 配置路径，没有问题。那么我就尝试启动了apache，启动方式为 service httpd restart。但此时查看apache的error_log，现在<strong>提示找不到site.py错误</strong>。</p>
<p>2.3. 查找相关的资料，我怀疑可能是mod_wsgi版本过低导致的。通过ldd modules/mod_wsgi.so 看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> linux-vdso.so.1 =&gt;  (0x00007ffff3300000)</div><div class="line"> libpython2.6.so.1.0 =&gt; /usr/lib64/libpython2.6.so.1.0 (0x00007f48fb4e6000)</div><div class="line"> libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f48fb2c9000)</div><div class="line"> libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f48fb0c4000)</div><div class="line"> libutil.so.1 =&gt; /lib64/libutil.so.1 (0x00007f48faec1000)</div><div class="line"> libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f48fac3d000)</div><div class="line"> libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f48fa8a8000)</div><div class="line"> /lib64/ld-linux-x86-64.so.2 (0x00007f48fbab9000)</div><div class="line">``` </div><div class="line">其中很明显libpython是2.6版本的，和我自装的2.7版本对不上。此时有两种方式</div><div class="line">  1. 修改link so文件，也就是把/usr/lib64/libpython2.6.so.1.0 做成一个软连接，link到python2.7.so上</div><div class="line">  2. 重现编译mod_wsgi</div><div class="line">考虑到尽量少走歪路，采用比较保险的第2中方案。</div><div class="line"></div><div class="line">2.4. 下载mod_wsgi源码，开始编译。然后就很顺利的报错了，出错如下</div><div class="line">```bash</div><div class="line">/usr/bin/ld: /usr/<span class="built_in">local</span>/lib/libpython2.7.a(abstract.o): relocation R_X86_64_32 against `.rodata.str1.8‘ can not be used when making a shared object; recompile with -fPIC</div><div class="line">/usr/<span class="built_in">local</span>/lib/libpython2.7.a: could not <span class="built_in">read</span> symbols: Bad value</div><div class="line">collect2: ld returned 1 <span class="built_in">exit</span> status</div><div class="line">apxs:Error: Command failed with rc=65536</div></pre></td></tr></table></figure></p>
<p>提示还是比较明显的，程序在做link libpython2.7.a 的时候找到的是静态库(.a)不是动态库(.so)，当时看到这个错误时感觉崩溃了，这说明需要重新编译python程序啊。。。蹲墙角哭了一会，回来默默的把python删掉，重新下载python源码，<strong>./configure时带上–enable-shared; make; make install。后再编译mod_wsgi</strong> 就可以了。替换掉modules/mod_wsgi.so。</p>
<p>PS: <em>关于mod_wsgi，有兴趣可以看一下: <a href="http://modwsgi.readthedocs.io/en/develop/" target="_blank" rel="external">http://modwsgi.readthedocs.io/en/develop/</a></em></p>
<p>2.5. 安装完mod_wsgi，先喝口水缓一缓，因为我相信apache的环境应该是不会有问题了，我只要service httpd restart就ok了。果然，现实给我了一记响亮的耳光，error_log 中出现了如下错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>] mod_wsgi (pid=<span class="number">4017</span>): Target WSGI script <span class="string">'/var/www/html/attence/wsgi.py'</span> cannot be loaded <span class="keyword">as</span> Python module.</div><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>] mod_wsgi (pid=<span class="number">4017</span>): Exception occurred processing WSGI script <span class="string">'/var/www/html/attence/wsgi.py'</span>.</div><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>] Traceback (most recent call last):</div><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>]   File <span class="string">"/var/www/html/attence/wsgi.py"</span>, line <span class="number">23</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>]     <span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application</div><div class="line">[Fri Oct <span class="number">13</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">42</span> <span class="number">2017</span>] [error] [client <span class="number">192.168</span><span class="number">.5</span><span class="number">.102</span>] ImportError: No module named django.core.wsgi</div></pre></td></tr></table></figure></p>
<p>口中的水差点吐在屏幕上。。。怎么django没有了。。。我突然间意识到我重装了python。。。然后开始了重装各种依赖的漫漫长路。(<strong>装完一个后，重启apache，根据错误提示No module named XXX，找对应依赖的下载地址即可</strong>)。</p>
<p>2.6. 安装完django的依赖后，error_log出现了一个诡异的错误<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[Sun Oct <span class="number">15</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">02</span> <span class="number">2017</span>] [error] [client <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] mod_wsgi (pid=<span class="number">880</span>): Target WSGI script <span class="string">'/var/www/html/attence/wsgi.py'</span> cannot be loaded <span class="keyword">as</span> Python module.</div><div class="line">[Sun Oct <span class="number">15</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">02</span> <span class="number">2017</span>] [error] [client <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] mod_wsgi (pid=<span class="number">880</span>): Exception occurred processing WSGI script <span class="string">'/var/www/html/attence/wsgi.py'</span>.</div><div class="line">//.... 省略掉中间很多错误日志</div><div class="line">[Sun Oct <span class="number">15</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">02</span> <span class="number">2017</span>] [error] [client <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>]     __import__(name)</div><div class="line">[Sun Oct <span class="number">15</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">02</span> <span class="number">2017</span>] [error] [client <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>] ImportError: No module named attence.settings</div></pre></td></tr></table></figure></p>
<p>attence.settings是我的DJANGO_SETTINGS_MODULE，如果说找不到这个module，那么就说明整个路径配置有问题了。在这个地方我想了很久，也查了很多资料，都没什么结果。有时间就是会有灵光一现，我突然间意识到如果我手动跑/var/www/html/attence/wsgi.py这个文件会怎么样(因为我相信apache也是去运行这个文件的)。果然，也提示相同的错误，哈哈，那就方便多了呀，打开wsgi.py文件, 中间的一行代码引起了我的注意:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root = os.path.dirname(__file__)) </div><div class="line">sys.path.insert(<span class="number">0</span>, os.path.join(root,<span class="string">'site-packages'</span>))</div></pre></td></tr></table></figure></p>
<p>很诡异的代码，我猜想可能以前的人是把工程文件放在python lib 的 site-packages下的吧。将此段代码稍作修改<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root = os.path.dirname(os.path.realpath(__file__))</div><div class="line">sys.path.append(root)</div></pre></td></tr></table></figure></p>
<p>此时，再运行wsgi文件，没有再提示错误，重启apache，不再提示这个错误，而是提示其他的依赖ImportError， 如 ImportError: No module named tablib，然后又开始了装依赖的漫漫长路。</p>
<p>2.7. 终于，重启apache, wget ${URL} 不再报错了，说明终于配完了，我欣喜若狂。打开浏览器，输入URL，然后页面提示： 无法访问此网站。我的心又碎了了。。。这又是为啥呢，后来发现是防火墙启动了，只开放了8080端口。。。然后我就把果断把防火墙关掉, <strong>service iptables stop</strong>。</p>
<p>2.8. 终于的终于，我在浏览器上看到了我想要的页面。我的眼泪也终于流下来了。。。。</p>
<p>三. 总结:<br>整个过程花了我挺久时间的，有自己不小心走的弯路，也有学习到自己不知道的技术。<br>3.1. centos下的apache叫httpd, 其他一样<br>3.2. WSGI相关的知识点需要再重新学习一下，其中很多地方有点印象，但又不确定，导致查询资料花费挺长时间的<br>3.3. django作为python最火热之一的web框架，应该能够熟练应用。<br>3.4. 内网正常，外网无法访问的情况下，一般看一下防火墙或者nginx的配置<br>3.5. 熟悉linux下的源码安装方式，包括C程序的make以及python的setup<br>3.6. 还有其他linux下的一些快捷方式，如通过CTRL+R来查找历史命令，很简单，但很实用，能够极大加快调查问题的速度。</p>
<p>有些问题事后想来还是很简单的，但当时的确困扰了我好久。但总的来说，花的时间非常值得。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一. 大概情况&lt;br&gt;就是说有一个django服务需要部署到centos的apache上去。但是呢该centos内核版本较低，自带的python版本较低。需要自己编译一个python2.7的版本替换掉系统的。然后就开展了一场与各种配置的艰苦斗争。。。&lt;/p&gt;
&lt;p&gt;篇幅短长
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="centos" scheme="http://yoursite.com/tags/centos/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何用C写python库</title>
    <link href="http://yoursite.com/2017/06/03/%E5%A6%82%E4%BD%95%E7%94%A8C%E5%86%99python%E5%BA%93/"/>
    <id>http://yoursite.com/2017/06/03/如何用C写python库/</id>
    <published>2017-06-03T08:52:18.000Z</published>
    <updated>2017-06-03T11:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>还是比较简单的，这次就权当入个门吧</p>
<ol>
<li><p>写好一个C函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;python2.7/Python.h&gt; //默认python版本就是#include&lt;Python.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> PyObject *<span class="title">hellozkw</span><span class="params">(PyObject *self, PyObject *args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="comment">//解析参数</span></div><div class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">"i"</span>, &amp;num)) &#123;</div><div class="line">        <span class="keyword">return</span> Py_BuildValue(<span class="string">"i"</span>, <span class="number">-1</span>);</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello zkw %d\n"</span>, num);                                                                                                                                                   </div><div class="line">    <span class="keyword">return</span> Py_BuildValue(<span class="string">"i"</span>, <span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> PyMethodDef HMethods[] = &#123; </div><div class="line">    <span class="comment">//方法名，导出函数，参数传递方式，方法描述。</span></div><div class="line">    &#123;<span class="string">"hellozkw"</span>, hellozkw, METH_VARARGS, <span class="string">"hahahaha.... from zkw's hello"</span>&#125;,</div><div class="line">    &#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inithello</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    (<span class="keyword">void</span>) Py_InitModule(<span class="string">"hello"</span>, HMethods);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>准备一个setup文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</div><div class="line"></div><div class="line">module = Extension(<span class="string">'hello'</span>, sources = [<span class="string">'hello.c'</span>])</div><div class="line">                                                                                                                                                                                     </div><div class="line">setup(name = <span class="string">'hello test'</span>, version = <span class="string">'1.0'</span>, ext_modules = [module])</div></pre></td></tr></table></figure>
</li>
<li><p>Makefile文件</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">publish:</span></div><div class="line">    python setup.py build</div><div class="line">    python setup.py install</div></pre></td></tr></table></figure>
</li>
<li><p>运行make publush</p>
</li>
<li>运行即可<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hello</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ret = hello.hellozkw(<span class="number">123</span>)</div><div class="line">hello zkw <span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ret</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是比较简单的，这次就权当入个门吧&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;写好一个C函数&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 动态传入表名进行sql查询</title>
    <link href="http://yoursite.com/2017/05/13/Mybatis%20%E5%8A%A8%E6%80%81%E4%BC%A0%E5%85%A5%E8%A1%A8%E5%90%8D%E8%BF%9B%E8%A1%8Csql%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2017/05/13/Mybatis 动态传入表名进行sql查询/</id>
    <published>2017-05-13T08:52:18.000Z</published>
    <updated>2017-06-03T11:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上也有相关的方法，基本都为</p>
<ol>
<li>添加属性statementType=”STATEMENT”</li>
<li>用${}代替#{}。如此一来就会有sql注入的危险。</li>
</ol>
<p>今天自己尝试了一种新的方法，如下:</p>
<h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>利用org.apache.ibatis.annotations.Param的注解，在xml中判断传入的参数:表名用${},值用#{}。</p>
<h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><ul>
<li>定义一个mapper</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span></span>&#123;</div><div class="line">    <span class="comment">//统计userId的对应的数据总数</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countByUserId</span><span class="params">(@Param(<span class="string">"tableName"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"userId"</span>)</span> Integer userId)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>定义xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"TestMapper对应路径"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countByUserId"</span> <span class="attr">parameterType</span>=<span class="string">"hashmap"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></div><div class="line">        SELECT</div><div class="line">        COUNT(1)</div><div class="line">        FROM</div><div class="line">        $&#123;tableName&#125;</div><div class="line">        WHERE</div><div class="line">        userId = #&#123;userId&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如此配置，即可以实现表名的动态传入，又可以防止sql注入的危险。传入库名或者字段名同理可得。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上也有相关的方法，基本都为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加属性statementType=”STATEMENT”&lt;/li&gt;
&lt;li&gt;用${}代替#{}。如此一来就会有sql注入的危险。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;今天自己尝试了一种新的方法，如下:&lt;/p&gt;
&lt;h4 id=
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java native关键字</title>
    <link href="http://yoursite.com/2016/07/03/Java_native/"/>
    <id>http://yoursite.com/2016/07/03/Java_native/</id>
    <published>2016-07-03T08:52:18.000Z</published>
    <updated>2017-06-03T11:53:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java的Object类中的函数定义如hasCode()函数如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hasCode</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>看了之后觉得很奇怪，为什么会有native呢?今天稍微来了解一下</p>
<h2 id="什么是native"><a href="#什么是native" class="headerlink" title="什么是native"></a>什么是native</h2><p>native就是本地的意思，Java中native是一个关键字，用来修饰函数定义，表明该函数是由非Java写的。(类似C++调用C的extern C告知编译器去调用一个C函数)</p>
<blockquote>
<p>“A native method is a Java method whose implementation is provided by non-java code.”</p>
</blockquote>
<p>定义一个native函数时，并不提供实现题(有点类似于Java的Interface定义)，原因就是函数的具体实现是由非Java语言在外面实现的。下面给出一些native函数的定义示例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IHaveNatives</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Native1</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">Native2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">float</span> <span class="title">Native3</span><span class="params">(Object o)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">Native4</span><span class="params">(<span class="keyword">int</span>[] ary)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很显然，native可以修饰几乎所有类型的函数以及返回所有类型的返回值，当然很明显的一点就是不能修饰abstract类型的函数，原因也很明显:native表示该函数有外部的具体实现，而abstract表示该函数没有具体的实现。这里说明一点，如果带native的函数被继承后可以用java重写(带final的不能被重写)。</p>
<h2 id="为什么要有native"><a href="#为什么要有native" class="headerlink" title="为什么要有native"></a>为什么要有native</h2><ol>
<li>与java环境外交互：<br>有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。</li>
<li>与操作系统交互：<br>JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</li>
<li>Sun’s Java：<br>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li>
</ol>
<h2 id="怎么样使用native"><a href="#怎么样使用native" class="headerlink" title="怎么样使用native"></a>怎么样使用native</h2><ol>
<li><p>首先创建一个native的类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloNative</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span></div><div class="line">    &#123;</div><div class="line">        System.loadLibrary(<span class="string">"HelloNative"</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</div><div class="line">     </div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"static-access"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">new</span> HelloNative().sayHello();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行生成javah，等到头文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac HelloNative.java</div><div class="line">javah HelloNative</div></pre></td></tr></table></figure>
</li>
</ol>
<p>就可以等到如下的HelloNative.h文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class HelloNative */</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_HelloNative</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_HelloNative</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     HelloNative</div><div class="line"> * Method:    sayHello</div><div class="line"> * Signature: ()V</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_HelloNative_sayHello</span></span></div><div class="line">  <span class="params">(JNIEnv *, jclass)</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>根据头文件实现一个本地方法</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloNative.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_HelloNative_sayHello</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello，JNI"</span>);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>用GCC生成库文件</p>
</li>
<li>运行即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java HelloNative</div><div class="line"></div><div class="line">Hello，JNI</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在Java的Object类中的函数定义如hasCode()函数如下:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="native" scheme="http://yoursite.com/tags/native/"/>
    
  </entry>
  
  <entry>
    <title>使用pelican和github搭建个人blog</title>
    <link href="http://yoursite.com/2016/04/13/pelican_blog/"/>
    <id>http://yoursite.com/2016/04/13/pelican_blog/</id>
    <published>2016-04-13T08:52:18.000Z</published>
    <updated>2017-06-03T11:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念</p>
<h3 id="1-搭建环境准备"><a href="#1-搭建环境准备" class="headerlink" title="1.搭建环境准备"></a>1.搭建环境准备</h3><p>本人属于重度Linux患者，环境为Ubuntu 14.04LTS，其他环境应该类似</p>
<h3 id="2-涉及相关技术"><a href="#2-涉及相关技术" class="headerlink" title="2.涉及相关技术"></a>2.涉及相关技术</h3><ul>
<li>Python2.7 及其相关</li>
<li>Pelican</li>
<li>Github</li>
<li>Markdown</li>
<li>And so on …<h4 id="2-1-Pelican"><a href="#2-1-Pelican" class="headerlink" title="2.1. Pelican"></a>2.1. Pelican</h4></li>
<li>Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强。同时有很多主题可以使用。</li>
<li>Pelican的github地址:  <a href="https://github.com/getpelican/pelican" target="_blank" rel="external">https://github.com/getpelican/pelican</a></li>
<li>Pelican 主题的github地址:  <a href="https://github.com/getpelican/pelican-themes" target="_blank" rel="external">https://github.com/getpelican/pelican-themes</a></li>
</ul>
<h3 id="3-使用Pelican-搭建个人静态博客"><a href="#3-使用Pelican-搭建个人静态博客" class="headerlink" title="3. 使用Pelican 搭建个人静态博客"></a>3. 使用Pelican 搭建个人静态博客</h3><h4 id="3-1-安装pelican"><a href="#3-1-安装pelican" class="headerlink" title="3.1. 安装pelican"></a>3.1. 安装pelican</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aptitude install python-pelican</div></pre></td></tr></table></figure>
<p>python2.7 以及相关其他依赖不做介绍</p>
<h4 id="3-2-开始搭建"><a href="#3-2-开始搭建" class="headerlink" title="3.2. 开始搭建"></a>3.2. 开始搭建</h4><p>输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir blog</div><div class="line"><span class="built_in">cd</span> blog</div><div class="line">pelican-quickstart</div></pre></td></tr></table></figure></p>
<p>pelican-quickstart 是pelican 自带命令，根据提示一步步输入相应的配置项，不知道如何设置的接受默认即可，后续可以通过编辑pelicanconf.py文件更改配置</p>
<p>结束后生成目录如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">blog/</div><div class="line">├── content              <span class="comment"># 存放输入的Markdown文件夹</span></div><div class="line">├── output               <span class="comment"># 生成的输出文件</span></div><div class="line">├── develop_server.sh    <span class="comment"># 开启测试服务器脚本</span></div><div class="line">├── Makefile             <span class="comment"># 管理博客的Makefile</span></div><div class="line">├── pelicanconf.py       <span class="comment"># 主配置文件</span></div><div class="line">└── publishconf.py       <span class="comment"># 主发布文件</span></div></pre></td></tr></table></figure></p>
<p>####3.3. 写博客内容</p>
<ul>
<li>进入到content 目录下，用Markdown 开始编写内容。Markdown语法简单，Google即可</li>
<li>Markdown 在线编辑器推荐使用<a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a>，个人使用不错。本地编辑器使用ReText。</li>
<li>切记在每个文件前四行输入如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Title: 文章标题</div><div class="line">Date: 2013-04-18</div><div class="line">Category: 文章类别</div><div class="line">Tag: 标签1, 标签2</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####3.4. 预览博客<br>输入以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make publish</div><div class="line">make serve</div></pre></td></tr></table></figure></p>
<p>打开浏览器，输入127.0.0.1:8000 即可看到博客</p>
<p>####3.5. 选择主题<br><a href="https://github.com/getpelican/pelican-themes" target="_blank" rel="external">pelican-themes</a> 上有很多主题， git clone后可以使用如下命令安装任一主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pelican-themes -i XXXXXX</div></pre></td></tr></table></figure></p>
<p>安装完成后在pelicanconf.py文件中修改THEME 容，如安装了pelican-bootstrap3主题，那么修改THEME =”pelican-bootstrap3”，重启即可看到主题修改</p>
<p>####3.6. 设置favicon.ico<br>favicon.ico 即Favorites Icon的缩写，其可以让浏览器除显示相应的标题外，还以图标的方式区别不同的网站。  </p>
<ol>
<li>选择图片，生成.ico文件(可直接使用网站生成如 <a href="http://www.bitbug.net/" target="_blank" rel="external">在线制作ico图标</a>)</li>
<li>将图片命名成favicon.ico，放置到与Makefile同级目录</li>
<li>修改Makefile，添加移动favicon.ico功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FAVICONICO=$(BASEDIR)/favicon.ico</div><div class="line"></div><div class="line">publish: clean                                                                                                                                                                                           </div><div class="line">    $(PELICAN) $(INPUTDIR) -o $(OUTPUTDIR) -s $(PUBLISHCONF) $(PELICANOPTS)</div><div class="line">    cp $(FAVICONICO) $(OUTPUTDIR)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>####3.7. 设置评论系统<br>在<a href="https://disqus.com/admin/signup" target="_blank" rel="external">Disqus</a>上申请一个站点，记牢Shortname。 在pelicanconf.py添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DISQUS_SITENAME = Shortname</div></pre></td></tr></table></figure></p>
<p>设置后可以在每个blog下出现如此评论系统<br><img src="http://ww3.sinaimg.cn/large/73e6e6e1gw1f1rj38tgbnj20po08yq3s.jpg" alt="disqus_comments"></p>
<p>####3.8. 添加图片图床<br>前两天一直在找一个简单易用的图床，终于找到一个推荐的<a href="https://weibotuchuang.sinaapp.com/" target="_blank" rel="external">围脖是个好图床</a></p>
<ol>
<li>进入网站，选择对应的浏览器安装插件(本人安装了Chrome插件)</li>
<li>安装完成后，打开插件，会出现提示对话框，将图片拖入即可生成对应的图片URL了</li>
</ol>
<p>####3.X. 其他功能<br>其他还有很多功能如评论系统，分析系统，站内搜索可以添加，后续会更新</p>
<h3 id="4-使用github发布博客"><a href="#4-使用github发布博客" class="headerlink" title="4. 使用github发布博客"></a>4. 使用github发布博客</h3><p>原理: Github为每一个用户分配了一个二级域名username.github.io，用户为自己的二级域名创建主页很简单，只需要在Github下创建一个名为username.github.io的版本库，并向其master分支提交网站静态页面即可。</p>
<ol>
<li>登陆Github，创建一个名为username.github.io的版本库(必须如此格式)</li>
<li>将blog/output 下的内容git到username.github.io下</li>
<li>少等片刻，登陆<a href="http://username.github.io，会发现自己的个人博客已经生成" target="_blank" rel="external">http://username.github.io，会发现自己的个人博客已经生成</a></li>
</ol>
<p>如此一来，一个具有Geek风格的个人博客搭建完毕。可以出去装X了…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几日浏览网页时无意中看到Pelican，于是心血来潮想要搭建个人博客玩玩。联想到github已经提供个人域名，一切都顺利成章。简单写点用做留念&lt;/p&gt;
&lt;h3 id=&quot;1-搭建环境准备&quot;&gt;&lt;a href=&quot;#1-搭建环境准备&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="pelican" scheme="http://yoursite.com/tags/pelican/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
